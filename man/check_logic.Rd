% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/check-logic.R
\name{check_logic}
\alias{check_logic}
\alias{check_correct}
\alias{check_or}
\title{Combine tests}
\usage{
check_correct(state, ...)

check_or(state, ...)
}
\arguments{
\item{state}{The state. Typically \code{\link{ex}} but can also be a
lower-level state if you're using nested \code{check_or}s or
\code{check_correct}s}

\item{...}{sets of tests. In the case of \code{check_correct}, the first set
is the \code{check_code}, the second set is the \code{diagnose_code}. For
\code{check_or}, an unrestricted number of sets of tests: only one of these
tests has to pass for the \code{check_or} to pass.}
}
\description{
\code{check_correct} checks whether a set of tests passes, and does
additional, more precise tests if these tests fail. In addition to the state,
it takes two code chunks; \itemize{\item{\code{check_code}: specifies the
code that checks on the (typically, final results of the) student's code.
These tests are executed silently, without the reporter generating
information for these.} \item{\code{diagnose_code}: Set of tests that gets
executed if the tests in \code{check_code} fail. These tests contain more
detailed tests, to pinpoint the problem.} }
}
\details{
\code{check_correct} increases the flexibility for the student: if the tests
in \code{check_code} pass, the results of the tests in \code{diagnose_code}
are not considered. If you test for the end result in \code{check_code}, and
only do more rigorous testing in \code{diagnose_code}, you can allow for
multiple solutions to a challenge.

Similarly, \code{check_or} checks whether one of many test sets pass. That
way, you can allow for multiple solutions.

Both \code{check_or} and \code{check_correct} makes the state you feed it to
its subtests available as \code{.} (the dot), similar to how magrittr does
it.
}
\examples{
\dontrun{
# Example 1 solution code
x <- mean(1:3)

# Example SCT
ex() \%>\% check_correct(
  check_object(., "x") \%>\% check_equal(),
  check_fun(., "mean") \%>\% check_arg("x") \%>\% check_equal()
)

# Following submissions will all be accepted:
x <- mean(1:3)
x <- 2
x <- mean(-1:5)

# Example 2 solution code
# a <- 3; b <- 4

# Example SCT
ex() \%>\% check_or(
  check_object(., 'a') \%>\% check_equal(),
  check_object(., 'b') \%>\% check-equal()
)

# Following submissions will all be accepted:
a <- 3; b <- 4
a <- 3
b <- 4
}

}
