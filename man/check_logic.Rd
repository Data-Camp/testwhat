% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/check-logic.R
\name{check_correct}
\alias{check_correct}
\alias{check_or}
\title{Combine tests}
\usage{
check_correct(check_code, diagnose_code)

check_or(..., incorrect_msg = NULL, choose_feedback = 1)
}
\arguments{
\item{check_code}{In \code{check_correct}, tests that are always run.}

\item{diagnose_code}{In \code{check_correct}, tests that are run only if the tests in \code{check_code} fail.}

\item{...}{a set of tests passed to \code{check_or}, each set separated by a comma. Only one of these tests should pass}

\item{incorrect_msg}{In \code{check_or} chracter string to override message generated by the failing test block.}

\item{choose_feedback}{If all tests fail in \code{check_or} , selects the feedback of the set of tests that should be shown}
}
\description{
\code{check_correct} checks whether a set of tests passes, and do additional, more precise tests if there
were failures. The teacher should specify two code chunks; \itemize{ 
\item{\code{check_code}: specifies the code that checks on the (typically,
final results of the) student's code. These tests are executed silently,
without the reporter generating information for these.} 
\item{\code{diagnose_code}: Set of tests that gets executed if the tests in
\code{check_code} fail. These tests contain more detailed tests, to pinpoint
the problem.} }
}
\details{
\code{check_correct} increases the flexibility for the student: if the tests 
in \code{check_code} pass, the results of the tests in \code{diagnose_code}
are not considered. If you test for the end result in \code{check_code}, and
only do more rigorous testing in \code{diagnose_code}, you can allow for
multiple solutions to a challenge.

Similarly, \code{check_or} checks whether one of many test sets pass. That way, you can allow for multiple solutions
}
\examples{
\dontrun{
# Example 1 solution code
x <- mean(1:3)

# Example SCT
check_correct({
  ex() \%>\% check_object("x") \%>\% check_equal()
}, {
  ex() \%>\% check_fun("mean") \%>\% check_arg("x") \%>\% check_equal()
})

# Following submissions will all be accepted:
x <- mean(1:3)
x <- 2
x <- mean(-1:5)


# Example 2 solution code
# a <- 3; b <- 4

# Example SCT
test_or(
  ex() \%>\% check_object('a') \%>\% check_equal(),
  ex() \%>\% check_object('b') \%>\% checK-equal()
)

# Following submissions will all be accepted:
a <- 3; b <- 4
a <- 3
b <- 4
}

}
