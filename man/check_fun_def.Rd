% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/check-fun-def.R
\name{check_fun_def}
\alias{check_fun_def}
\alias{check_arguments}
\alias{check_body.FunDefState}
\alias{check_call}
\title{Check whether the student defined a function correctly}
\usage{
check_fun_def(state, name, undefined_msg = NULL, no_fundef_msg = NULL,
  append = TRUE)

check_arguments(state, incorrect_number_arguments_msg = NULL,
  append = TRUE)

\method{check_body}{FunDefState}(state, not_found_msg = NULL,
  append = TRUE, ...)

check_call(state, ...)
}
\arguments{
\item{state}{the state to start from}

\item{name}{The name of the function to test}

\item{undefined_msg}{Custom message in case the specified function
was not defined}

\item{no_fundef_msg}{Custom message in case the function specified in \code{name} is not a function.}

\item{append}{Whether or not to append the feedback to feedback built in previous states}

\item{incorrect_number_arguments_msg}{Optional feedback message in case the 
function does not have the correct number of arguments.}

\item{not_found_msg}{Custom feedback message if function definition was not
found.}

\item{...}{arguments to pass to the user-defined function to test result, output or error in a later stage}
}
\description{
\code{check_fun_def} checks whether an object is defined in the student enviornment, and returns a state that can be piped to:
\itemize{
  \item{\code{check_arguments}, to check whether the correct arguments where specified.}
  \item{\code{check_call}, to call the function with the provided arguments, and produces a state that can be piped to \code{check_output}, \code{check_result} and \code{check_error} to compare the output, result or error from calling the function between student and solution.}
  \item{\code{check_body}, that returns a state that focuses on the body that defines the function. Note that you cannot use \code{\link{check_object}} to compare variables that are limited to the function scope.}
}
}
\examples{
\dontrun{
# Example:
my_fun <- function(a, b) { 
  stopifnot(is.numeric(a), is.numeric(b))
  a + b 
}

# SCT
ex() \%>\% check_fun_def("my_fun") \%>\% {
  check_arguments(.)
  check_call(., a = 1, b = 2) \%>\% {
    check_result(.) \%>\% check_equal()
    check_output(.) \%>\% check_equal()
  }
  check_call(., a = 'c', b = 3) \%>\% check_error() \%>\% check_equal()
  check_body(.) \%>\% check_code("+")
}
}

}
