% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/check-error.R
\name{check_error}
\alias{check_error}
\alias{check_error.default}
\title{Explicitly check whether the student's submission threw an error.}
\usage{
check_error(state, ...)

\method{check_error}{default}(state, incorrect_msg = NULL, ...)
}
\arguments{
\item{state}{State to start from (for \code{check_error})}

\item{...}{S3 stuff}

\item{incorrect_msg}{additional message that is appended to the automatically
generated feedback message.}
}
\description{
With information gathered from the R Backend, testwhat can detect whether the
student's submission generated an error.
}
\details{
If all SCTs for an exercise pass, before marking the submission as correct
testwhat will automatically check whether the student submission generated an
error, unless the exercise explicitly allows for errors. This means it is not
needed to use \code{check_error} explicitly. However, in some cases,
using \code{check_error} explicitly somewhere
throughout your SCT execution can be helpful:

\itemize{
\item{If you want to make sure people didn't write typos when
writing a long function name.}
\item{If you want to first verify whether a
function call actually runs,before checking whether the arguments were
specified correctly.}
\item{More generally, if, because of the content, it's
instrumental that the script runs without errors before doing any other
verifications.}
}
}
\examples{
\dontrun{
# Example student code: x <- 4 + "a"

# SCT that explicitly checks for an error first
ex() \%>\% check_error()
ex() \%>\% check_object('x') \%>\% check_equal()

# SCT that does not have to check for an error
# testwhat will verify for an error implicitly
ex() \%>\% check_object('x') \%>\% check_equal()
}

}
