% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/test-if-else.R
\name{test_if_else}
\alias{test_if_else}
\title{Test a conditional statement}
\usage{
test_if_else(index = 1, if_cond_test = NULL, if_expr_test = NULL,
  else_expr_test = NULL, not_found_msg = NULL, missing_else_msg = NULL,
  env = parent.frame())
}
\arguments{
\item{index}{The index of the control structure to check.}

\item{if_cond_test}{tests to perform in the if condition part 
of the control structure}

\item{if_expr_test}{tests to perform in the if expression part 
of the control structure}

\item{else_expr_test}{tests to perform in the else expression 
part of the control structure}

\item{not_found_msg}{Message in case the control structure 
(at given index) is not found.}

\item{missing_else_msg}{Messing in case the else part of the 
control structure should be there but is missing}

\item{env}{Environment in which to perform all these SCTs}
}
\description{
Check whether the student correctly coded a conditional statement. 
The function parses all \code{if-else} constructs and then runs tests for 
all composing parts of this constructions.
}
\details{
If there's an \code{else if} in there, this counts as a 'sub-conditional'
statement (see example).
}
\examples{
\dontrun{
# Example solution code
vec <- c("a", "b", "c")
if("a" \%in\% vec) {
 print("a in here")
} else if(any("b" > vec)) {
 cat("b not smallest")
} else {
 str(vec)
}

# SCT to test this loop
test_if_else({
 test_student_typed("\%in\%")
}, {
 # test if expr part
 test_function("print")
}, {
 # test else expr part
 test_if_else({
   # test cond part of else if
   test_student_typed(">")
 }, {
   # test else if expr part
   test_function("cat")
 }, {
   # test else part
   test_function("str")
 })
})
}

}

