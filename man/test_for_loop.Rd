% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/test-for-loop.R
\name{test_for_loop}
\alias{test_for_loop}
\title{Test a for loop}
\usage{
test_for_loop(index = 1, cond_test = NULL, expr_test = NULL,
  student_code = get_student_code(), solution_code = get_solution_code(),
  not_found_msg = NULL, env = parent.frame())
}
\arguments{
\item{index}{The index of the for loop to check.}

\item{cond_test}{testwhat tests for the condition part of the for loop}

\item{expr_test}{testwhat tests for the expression part of the for loop}

\item{student_code}{character string: (chunk of) student submission that is being tested.
Do not set this manually.}

\item{solution_code}{character string: (chunk of) solution code.
Do not set this manually.}

\item{not_found_msg}{optional feedback message in case the for loop 
(at given index) is not found.}

\item{env}{Environment in which to run the additional testwhat tests.}
}
\description{
Test whether a student coded a for loop correctly. The function parses
the student and solution code and selects the first, second ... for loop in the
code depending on the \code{index} argument, and then runs two chunks of tests:
\itemize{
 \item{\code{cond_test}: \code{testwhat} tests specifically for
 the iteration part of the for loop, inside the parentheses of \code{for}.}
 \item{\code{expr_test}: \code{testwhat} for the code inside the for loop itself.}
}
The tests for the iteration part and the expression part
of the for loop can only be text-based. You cannot use functions such
as \code{\link{test_object}} that also depend on the student and solution
environment.
}
\examples{
\dontrun{
# Example 1 solution code:
for(i in 1:5) {
 print("hurray!") 
}

# SCT to test this loop:
test_for_loop({
 test_student_typed("in")
 test_student_typed("1")
 test_student_typed("5")
}, {
 test_function("print")
})
}

}

